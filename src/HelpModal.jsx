import { useState } from 'react';
import styles from './HelpModal.module.css';

// --- üëá [ÏàòÏ†ï] Delay Node Ï∂îÍ∞Ä Î∞è Slot Íµ¨Î¨∏ ÏÑ§Î™Ö ÏàòÏ†ï ---
const HelpManual = () => (
<>
 <h2>1. Getting Started</h2>
 <h3>1.1. Login</h3>
 <ul>
 <li>You must log in with a Google account to use the service.</li>
 <li>Only users with <strong>authorized emails and domains</strong>(<code>cyberlogitec.com</code>, <code>wisenut.co.kr</code>) can access the service.</li>
 </ul>
 <h3>1.2. Main Screen</h3>
 <ul>
 <li><strong>Flow Editor</strong>: The main workspace for visually creating and editing chatbot conversation flows.</li>
 <li><strong>Board</strong>: Provides a simple bulletin board feature to help communication between users.</li>
 <li><strong>API Docs</strong>: Displays the API specification for managing scenarios.</li>
 <li><strong>Backend Switch</strong>: Located in the top-right header, this switch allows you to toggle between <strong>Firebase</strong> and <strong>FastAPI</strong> backends for scenario data storage and management.</li>
 </ul>

 <h2>2. Scenario Management</h2>
 <p>The first screen you see after login is the <strong>Scenario List</strong>.</p>
 <ul>
 <li><strong>Add New Scenario</strong>: Click the <code>+ Add New Scenario</code> button and enter a scenario name and select a job type to create a new conversation flow.</li>
 <li><strong>Select Scenario</strong>: Click on a scenario name in the list to navigate to that scenario's editing screen.</li>
 {/* --- üëá [ÏàòÏ†ï] Clone Í∏∞Îä• Ï∂îÍ∞Ä --- */}
 <li><strong>Edit/Clone/Delete Scenario</strong>: Use the <code>Edit</code> icon to change the name or job type, the <code>Clone</code> icon to duplicate the scenario with a new name, or the <code>Delete</code> icon to permanently remove the scenario.</li>
 {/* --- üëÜ [ÏàòÏ†ï ÎÅù] --- */}
 </ul>

  <h2>3. Board Usage</h2>
  <ul>
    <li>You can write new posts, and attach images or files.</li>
    <li>You can edit or delete only the posts you have created.</li>
  </ul>

 <h2>4. Flow Editor Screen Layout</h2>
 <ol>
 <li><strong>Node Addition Panel (Left)</strong>: Add various types of nodes that make up the scenario to the canvas.</li>
 <li><strong>Canvas (Center)</strong>: Space for placing nodes and connecting them to create actual conversation flows. A <strong>Minimap</strong> is available in the bottom-right corner for easy navigation.</li>
 <li><strong>Controller Panel (Right)</strong>: Activated when you select a node on the canvas, allowing you to edit the detailed content of that node.</li>
 <li><strong>Simulator (Right)</strong>: Can be activated by clicking the <code><img src="/images/chat_simulator.png" alt="chatbot" style={{ width: '24px', height: '24px' }}/></code> icon to test how your written scenario works in real-time as an actual chatbot.</li>
 </ol>

 <h2>5. Node Types and Functions</h2>
 <p>Click the desired node from the left panel to add it to the canvas.</p>
 <table className={styles.table}>
 <thead>
  <tr>
  <th>Node Type</th>
  <th>Description</th>
  </tr>
 </thead>
 <tbody>
  <tr>
  <td><strong>Message</strong></td>
  <td>The most basic text message that the chatbot sends to users. You can add quick reply buttons (Quick Replies).</td>
  </tr>
  <tr>
  <td><strong>Form</strong></td>
  <td>A form for receiving structured data input from users (e.g., text, date, checkboxes, dropdown, grid). Options/data can be dynamically populated from slots. Selecting a row in a slot-bound grid stores the row data in the <code>selectedRow</code> slot.</td>
  </tr>
  <tr>
  <td><strong>Condition Branch</strong></td>
  <td>Divides the conversation flow into multiple branches based on user responses (buttons) or slot values (conditions, including boolean <code>true</code>/<code>false</code> and comparing slots).</td>
  </tr>
  <tr>
  <td><strong>SlotFilling</strong></td>
  <td>Used to receive user input (text or button click) and store it in specific variables (Slots).</td>
  </tr>
  <tr>
  <td><strong>API</strong></td>
  <td>Calls an external API. You can use slot values in the request (URL, headers, body) and save parts of the JSON response back into slots. It allows branching based on success/failure and supports multiple parallel API requests.</td>
  </tr>
  <tr>
  <td><strong>LLM</strong></td>
  <td>Connects to a large language model to generate text based on a dynamic prompt using slot values. The flow can be branched based on keywords in the generated response, and the full response can be saved to a slot.</td>
  </tr>
  <tr>
  <td><strong>Set Slot</strong></td>
  <td>Directly sets or updates the value of one or more slots using static values or values from other slots. Supports string, number, boolean, and JSON object/array types.</td>
  </tr>
  {/* --- üëá [Ï∂îÍ∞Ä] Delay Node --- */}
  <tr>
    <td><strong>Delay</strong></td>
    <td>Pauses the conversation flow for a specified duration (in milliseconds) before proceeding to the next node. Does not display any message to the user during the delay.</td>
  </tr>
  {/* --- üëÜ [Ï∂îÍ∞Ä ÎÅù] --- */}
  <tr>
  <td><strong>Link</strong></td>
  <td>Delivers external website links to users, optionally opening them in a new tab.</td>
  </tr>
   <tr>
  <td><strong>Toast</strong></td>
  <td>Displays a small, non-intrusive pop-up message (info, success, error) to the user in the simulator. It does not interrupt the conversation flow.</td>
  </tr>
  <tr>
  <td><strong>iFrame</strong></td>
  <td>Embeds an external webpage directly within the chatbot interface using an iframe, with configurable dimensions.</td>
  </tr>
 </tbody>
 </table>

 <h2>6. Scenario Editing and Testing</h2>
 <h3>6.1. Node Editing</h3>
 <ol>
 <li>Click on the node you want to edit on the canvas.</li>
 <li>Modify the node's text, buttons, form elements, API details, etc. in the <strong>Controller Panel</strong> that appears on the right.</li>
 <li>When editing is complete, click the <code>Save Changes</code> button at the bottom of the controller panel to apply changes to the node.</li>
 </ol>

 <h3>6.2. Using Slots (Variables)</h3>
 <p>Slots are variables used to store and reuse information within a scenario. You can store user input, data from API responses, LLM outputs, selected grid rows, or set them directly.</p>
 {/* --- üëá [ÏàòÏ†ï] Slot Íµ¨Î¨∏ ÏÑ§Î™Ö ÌÜµÏùº --- */}
 <p>To use a stored slot value within node content (like messages, prompts, URLs, API bodies, etc.), use the <strong>single brace notation</strong>: <code>{'{slotName}'}</code>.</p>
 <p><strong>Example:</strong> If you stored a user's name in a slot called <code>userName</code>, you can use it in a Message node like this: <code>Hello, {'{userName}'}! Welcome.</code> The Slot Display panel (top-left of the canvas) shows the current values of all slots during simulation.</p>
 {/* --- üëÜ [ÏàòÏ†ï ÎÅù] --- */}

 <h4>6.2.1. Dynamic Options/Data (Slot Binding)</h4>
 <p>In a <strong>Form</strong> node, you can dynamically populate the options of a <strong>Dropbox</strong> or the data in a <strong>Grid</strong> element from a slot containing an array.</p>
 <ul>
    <li><strong>Data Format</strong>: The slot must contain an array. For Dropbox, it can be strings or objects with <code>label</code>/<code>value</code>. For Grid, it should typically be an array of objects.</li>
    <li><strong>Setup</strong>:
        <ol>
            <li>Select the Dropbox or Grid element in the Form Node controller.</li>
            <li>In the 'Options Slot' (Dropbox) or 'Data Slot' (Grid) field, enter the name of the slot holding the array (e.g., <code>user_list</code>).</li>
            <li>(Grid specific) Optionally specify 'Display Labels' (comma-separated keys) to show specific columns, and check 'Hide Columns with Null Values'.</li>
            <li>Fallback options/data entered manually will be used if the slot is empty or invalid.</li>
        </ol>
    </li>
    <li><strong>Grid Row Selection</strong>: When a user clicks a row in a Grid populated via 'Data Slot', the entire data object for that row is automatically stored in a special slot named <code>selectedRow</code>. You can then use this slot (e.g., <code>{'{selectedRow.userId}'}</code>) in subsequent nodes.</li>
 </ul>

 <h3>6.3. Using the API Node</h3>
 <p>The API node allows for dynamic interaction with external servers.</p>
 <ul>
 <li><strong>Individual API Test</strong>: In single API mode, click the <strong>Play (‚ñ∂)</strong> icon on the node header to test that specific API call immediately using current slot values. In multi-API mode, use the 'Test' button in the controller for the selected API call.</li>
 <li><strong>Multi API Request</strong>: Check 'Enable Multi API' in the controller to send multiple requests in parallel. Add and configure each call. The node proceeds to 'On Success' only if *all* calls succeed, otherwise to 'On Error'.</li>
 {/* --- üëá [ÏàòÏ†ï] Slot Íµ¨Î¨∏ ÏÑ§Î™Ö ÏàòÏ†ï --- */}
 <li><strong>Dynamic Requests</strong>: Use slots (e.g., <code>{'{userId}'}</code>) in the URL, Headers (JSON string values), or Body (JSON string values) fields to make dynamic API calls.</li>
 {/* --- üëÜ [ÏàòÏ†ï ÎÅù] --- */}
 <li><strong>Response Mapping</strong>: Extract values from the JSON response using JSON Path (e.g., <code>data.user.name</code>, <code>data.items[0].product</code>) and save them into slots.</li>
 <li><strong>Success/Failure Branching</strong>: Connect the <code>On Success</code> handle (green) for successful calls and the <code>On Error</code> handle (red) for failed calls to different subsequent nodes.</li>
 </ul>

 <h3>6.4. Using the LLM Node</h3>
 <p>The LLM node sends a dynamic prompt (using slots like <code>{'{topic}'}</code>) to a large language model and displays the response.</p>
 <ul>
    <li><strong>Output Variable</strong>: Store the full LLM response text into a specified slot.</li>
    <li><strong>Conditional Branching</strong>: Add conditions based on 'Keywords'. If a keyword is found in the response, the flow follows that specific handle. Otherwise, it follows the 'Default' handle.</li>
 </ul>

 <h3>6.5. Node Connection</h3>
 <ul>
 <li>Drag from the handles (circles) on the edges of nodes to connect them.</li>
 <li><strong>Branch/API/LLM nodes</strong>: These have multiple source handles corresponding to different outcomes (button clicks, conditions, success/error, keywords). Hover over a handle to see its purpose.</li>
 </ul>

 <h3>6.6. Node and Connection Deletion/Duplication</h3>
 <ul>
 <li><strong>Delete Node</strong>: Click the <code>x</code> icon in the top right of the node.</li>
 <li><strong>Delete Connection</strong>: Click the connection line itself to select it, then press <code>Backspace</code> or <code>Delete</code>.</li>
 <li><strong>Duplicate Node</strong>: Select the node you want to copy, then click the <code>+ Duplicate Node</code> button at the bottom of the left panel.</li>
 </ul>

 <h3>6.7. Node and Scenario Group Management</h3>
  <p>Reuse parts of scenarios or entire scenarios efficiently.</p>
  <ul>
    <li><strong>Export/Import Nodes</strong>: Select nodes (Shift+click for multiple), click <code>Export Nodes</code> (copies to clipboard), then go to another scenario (or the same one) and click <code>Import Nodes</code> to paste.</li>
    <li><strong>Scenario as Group</strong>: Click <code>+ Scenario Group</code>, choose a scenario from the list. It will be imported as a single, collapsible group node representing that entire scenario's flow. Connect its input/output handles like a regular node.</li>
  </ul>

 {/* --- üëá [Ï∂îÍ∞Ä] Start Node ÏÑ§Î™Ö --- */}
 <h3>6.8. Setting the Start Node</h3>
 <ul>
  <li>Click the **Play (‚ñ∂)** icon in the header of any node to designate it as the starting point for the simulation.</li>
  <li>The designated Start Node will have a **green border and shadow**.</li>
  <li>Clicking the Play icon again on the same node will remove its Start Node designation.</li>
  <li>If no Start Node is explicitly set, the simulation will attempt to begin from a node that has no incoming connections.</li>
  <li>The currently set Start Node ID is saved along with the scenario data.</li>
 </ul>
 {/* --- üëÜ [Ï∂îÍ∞Ä ÎÅù] --- */}

 <h3>6.9. Save and Test</h3>
 <ul>
 <li><strong>Save</strong>: Click the Save icon (üíæ) in the top right to save the current scenario structure (including the Start Node ID) to the selected backend (Firebase/FastAPI).</li>
 <li><strong>Test</strong>: Click the Chatbot icon (ü§ñ) to open/close the simulator panel. Click the 'Start' button within the simulator header to begin testing from the designated Start Node (or the inferred starting node).</li>
 </ul>
</>
);

const HelpManual_ko = () => (
<>
 <h2>1. ÏãúÏûëÌïòÍ∏∞</h2>
 <h3>1.1. Î°úÍ∑∏Ïù∏</h3>
 <ul>
 <li>ÏÑúÎπÑÏä§Î•º Ïù¥Ïö©ÌïòÎ†§Î©¥ Íµ¨Í∏Ä Í≥ÑÏ†ïÏúºÎ°ú Î°úÍ∑∏Ïù∏Ìï¥Ïïº Ìï©ÎãàÎã§.</li>
 <li><strong>ÌóàÏö©Îêú Ïù¥Î©îÏùºÍ≥º ÎèÑÎ©îÏù∏</strong>(<code>cyberlogitec.com</code>, <code>wisenut.co.kr</code>)ÏùÑ Í∞ÄÏßÑ ÏÇ¨Ïö©ÏûêÎßå Ï†ëÍ∑ºÌï† Ïàò ÏûàÏäµÎãàÎã§.</li>
 </ul>
 <h3>1.2. Î©îÏù∏ ÌôîÎ©¥</h3>
 <ul>
 <li><strong>Flow Editor</strong>: Ï±óÎ¥á ÎåÄÌôî ÌùêÎ¶ÑÏùÑ ÏãúÍ∞ÅÏ†ÅÏúºÎ°ú ÎßåÎì§Í≥† Ìé∏ÏßëÌïòÎäî Í∏∞Î≥∏ ÏûëÏóÖ Í≥µÍ∞ÑÏûÖÎãàÎã§.</li>
 <li><strong>Board</strong>: ÏÇ¨Ïö©Ïûê Í∞Ñ ÏÜåÌÜµÏùÑ ÎèïÎäî Í∞ÑÎã®Ìïú Í≤åÏãúÌåê Í∏∞Îä•ÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.</li>
 <li><strong>API Docs</strong>: ÏãúÎÇòÎ¶¨Ïò§ Í¥ÄÎ¶¨Î•º ÏúÑÌïú API Î™ÖÏÑ∏Î•º Î≥¥Ïó¨Ï§çÎãàÎã§.</li>
 <li><strong>Î∞±ÏóîÎìú Ï†ÑÌôò Ïä§ÏúÑÏπò</strong>: Ïö∞Ï∏° ÏÉÅÎã® Ìó§ÎçîÏóê ÏúÑÏπòÌïòÎ©∞, ÏãúÎÇòÎ¶¨Ïò§ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• Î∞è Í¥ÄÎ¶¨Î•º ÏúÑÌïú Î∞±ÏóîÎìúÎ•º <strong>Firebase</strong>ÏôÄ <strong>FastAPI</strong> Ï§ëÏóêÏÑú ÏÑ†ÌÉùÌï† Ïàò ÏûàÏäµÎãàÎã§.</li>
 </ul>

 <h2>2. ÏãúÎÇòÎ¶¨Ïò§ Í¥ÄÎ¶¨</h2>
 <p>Î°úÍ∑∏Ïù∏ ÌõÑ Í∞ÄÏû• Î®ºÏ†Ä ÏãúÎÇòÎ¶¨Ïò§ Î™©Î°ù ÌôîÎ©¥Ïù¥ ÎÇòÌÉÄÎÇ©ÎãàÎã§.</p>
 <ul>
 <li><strong>ÏÉà ÏãúÎÇòÎ¶¨Ïò§ Ï∂îÍ∞Ä</strong>: <code>+ ÏÉà ÏãúÎÇòÎ¶¨Ïò§ Ï∂îÍ∞Ä</code> Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÍ≥† ÏãúÎÇòÎ¶¨Ïò§ Ïù¥Î¶ÑÍ≥º Job ÌÉÄÏûÖÏùÑ ÏÑ†ÌÉùÌïòÏó¨ ÏÉàÎ°úÏö¥ ÎåÄÌôî ÌùêÎ¶ÑÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§.</li>
 <li><strong>ÏãúÎÇòÎ¶¨Ïò§ ÏÑ†ÌÉù</strong>: Î™©Î°ùÏóêÏÑú ÏãúÎÇòÎ¶¨Ïò§ Ïù¥Î¶ÑÏùÑ ÌÅ¥Î¶≠ÌïòÎ©¥ Ìï¥Îãπ ÏãúÎÇòÎ¶¨Ïò§Ïùò Ìé∏Ïßë ÌôîÎ©¥ÏúºÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§.</li>
 {/* --- üëá [ÏàòÏ†ï] Clone Í∏∞Îä• Ï∂îÍ∞Ä --- */}
 <li><strong>ÏãúÎÇòÎ¶¨Ïò§ ÏàòÏ†ï/Î≥µÏ†ú/ÏÇ≠Ï†ú</strong>: Í∞Å Ìï≠Î™© ÏòÜÏùò <code>ÏàòÏ†ï</code> ÏïÑÏù¥ÏΩòÏúºÎ°ú Ïù¥Î¶ÑÏù¥ÎÇò Job ÌÉÄÏûÖÏùÑ Î≥ÄÍ≤ΩÌïòÍ≥†, <code>Î≥µÏ†ú</code> ÏïÑÏù¥ÏΩòÏúºÎ°ú ÏãúÎÇòÎ¶¨Ïò§Î•º ÏÉà Ïù¥Î¶ÑÏúºÎ°ú Î≥µÏ†úÌïòÎ©∞, <code>ÏÇ≠Ï†ú</code> ÏïÑÏù¥ÏΩòÏúºÎ°ú ÏãúÎÇòÎ¶¨Ïò§Î•º ÏòÅÍµ¨Ï†ÅÏúºÎ°ú Ï†úÍ±∞Ìï©ÎãàÎã§.</li>
 {/* --- üëÜ [ÏàòÏ†ï ÎÅù] --- */}
 </ul>

 <h2>3. Í≤åÏãúÌåê ÏÇ¨Ïö©Î≤ï</h2>
  <ul>
    <li>ÏÉà Í≤åÏãúÎ¨ºÏùÑ ÏûëÏÑ±ÌïòÍ≥†, Ïù¥ÎØ∏ÏßÄÎÇò ÌååÏùºÏùÑ Ï≤®Î∂ÄÌï† Ïàò ÏûàÏäµÎãàÎã§.</li>
    <li>ÏûêÏã†Ïù¥ ÏûëÏÑ±Ìïú Í≤åÏãúÎ¨ºÎßå ÏàòÏ†ïÌïòÍ±∞ÎÇò ÏÇ≠Ï†úÌï† Ïàò ÏûàÏäµÎãàÎã§.</li>
  </ul>

 <h2>4. Flow Editor ÌôîÎ©¥ Íµ¨ÏÑ±</h2>
 <ol>
 <li><strong>ÎÖ∏Îìú Ï∂îÍ∞Ä Ìå®ÎÑê (Ï¢åÏ∏°)</strong>: ÏãúÎÇòÎ¶¨Ïò§Î•º Íµ¨ÏÑ±ÌïòÎäî Îã§ÏñëÌïú Ï¢ÖÎ•òÏùò ÎÖ∏ÎìúÎ•º Ï∫îÎ≤ÑÏä§Ïóê Ï∂îÍ∞ÄÌï©ÎãàÎã§.</li>
 <li><strong>Ï∫îÎ≤ÑÏä§ (Ï§ëÏïô)</strong>: ÎÖ∏ÎìúÎ•º Î∞∞ÏπòÌïòÍ≥† Ïó∞Í≤∞ÌïòÏó¨ Ïã§Ï†ú ÎåÄÌôî ÌùêÎ¶ÑÏùÑ Íµ¨ÏÑ±ÌïòÎäî Í≥µÍ∞ÑÏûÖÎãàÎã§. Ïâ¨Ïö¥ ÌÉêÏÉâÏùÑ ÏúÑÌï¥ Ïö∞Ï∏° ÌïòÎã®Ïóê <strong>ÎØ∏ÎãàÎßµ</strong>Ïù¥ Ï†úÍ≥µÎê©ÎãàÎã§.</li>
 <li><strong>Ïª®Ìä∏Î°§Îü¨ Ìå®ÎÑê (Ïö∞Ï∏°)</strong>: Ï∫îÎ≤ÑÏä§ÏóêÏÑú ÎÖ∏ÎìúÎ•º ÏÑ†ÌÉùÌïòÎ©¥ ÌôúÏÑ±ÌôîÎêòÎ©∞, Ìï¥Îãπ ÎÖ∏ÎìúÏùò ÏÑ∏Î∂Ä ÎÇ¥Ïö©ÏùÑ Ìé∏ÏßëÌï† Ïàò ÏûàÏäµÎãàÎã§.</li>
 <li><strong>ÏãúÎÆ¨Î†àÏù¥ÌÑ∞ (Ïö∞Ï∏°)</strong>: <code><img src="/images/chat_simulator.png" alt="chatbot" style={{ width: '24px', height: '24px' }}/></code> ÏïÑÏù¥ÏΩòÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ ÌôúÏÑ±ÌôîÌï† Ïàò ÏûàÏúºÎ©∞, ÏûëÏÑ±Ìïú ÏãúÎÇòÎ¶¨Ïò§Í∞Ä Ïã§Ï†ú Ï±óÎ¥áÏ≤òÎüº ÎèôÏûëÌïòÎäîÏßÄ Ïã§ÏãúÍ∞ÑÏúºÎ°ú ÌÖåÏä§Ìä∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.</li>
 </ol>

 <h2>5. ÎÖ∏Îìú Ï¢ÖÎ•ò Î∞è Í∏∞Îä•</h2>
 <p>Ï¢åÏ∏° Ìå®ÎÑêÏóêÏÑú ÏõêÌïòÎäî ÎÖ∏ÎìúÎ•º ÌÅ¥Î¶≠ÌïòÏó¨ Ï∫îÎ≤ÑÏä§Ïóê Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî.</p>
 <table className={styles.table}>
 <thead>
  <tr>
  <th>ÎÖ∏Îìú<br />Ï¢ÖÎ•ò</th>
  <th>ÏÑ§Î™Ö</th>
  </tr>
 </thead>
 <tbody>
  <tr>
  <td><strong>Î©îÏãúÏßÄ</strong></td>
  <td>Ï±óÎ¥áÏù¥ ÏÇ¨Ïö©ÏûêÏóêÍ≤å Î≥¥ÎÇ¥Îäî Í∞ÄÏû• Í∏∞Î≥∏Ï†ÅÏù∏ ÌÖçÏä§Ìä∏ Î©îÏãúÏßÄÏûÖÎãàÎã§. Îπ†Î•∏ ÎãµÏû• Î≤ÑÌäº(Quick Replies)ÏùÑ Ï∂îÍ∞ÄÌï† Ïàò ÏûàÏäµÎãàÎã§.</td>
  </tr>
  <tr>
  <td><strong>Ìèº</strong></td>
  <td>ÏÇ¨Ïö©ÏûêÎ°úÎ∂ÄÌÑ∞ ÌÖçÏä§Ìä∏, ÎÇ†Ïßú, Ï≤¥ÌÅ¨Î∞ïÏä§, ÎìúÎ°≠Îã§Ïö¥, Í∑∏Î¶¨Îìú Îì± Ï†ïÌòïÌôîÎêú Îç∞Ïù¥ÌÑ∞ ÏûÖÎ†•ÏùÑ Î∞õÍ∏∞ ÏúÑÌïú ÏñëÏãùÏûÖÎãàÎã§. ÏÑ†ÌÉùÏßÄ/Îç∞Ïù¥ÌÑ∞Î•º Ïä¨Î°ØÏùÑ ÌÜµÌï¥ ÎèôÏ†ÅÏúºÎ°ú Íµ¨ÏÑ±Ìï† Ïàò ÏûàÏäµÎãàÎã§. Ïä¨Î°ØÏóê Î∞îÏù∏Îî©Îêú Í∑∏Î¶¨ÎìúÏùò ÌñâÏùÑ ÏÑ†ÌÉùÌïòÎ©¥ Ìï¥Îãπ Ìñâ Îç∞Ïù¥ÌÑ∞Í∞Ä <code>selectedRow</code> Ïä¨Î°ØÏóê Ï†ÄÏû•Îê©ÎãàÎã§.</td>
  </tr>
  <tr>
  <td><strong>Ï°∞Í±¥<br />Î∂ÑÍ∏∞</strong></td>
  <td>ÏÇ¨Ïö©ÏûêÏùò ÎãµÎ≥Ä(Î≤ÑÌäº ÌÅ¥Î¶≠) ÎòêÎäî Ïä¨Î°Ø Í∞í(Ï°∞Í±¥ ÎπÑÍµê, boolean <code>true</code>/<code>false</code> Ìè¨Ìï®, Ïä¨Î°Ø Í∞Ñ ÎπÑÍµê)Ïóê Îî∞Îùº ÎåÄÌôî ÌùêÎ¶ÑÏùÑ Ïó¨Îü¨ Í∞àÎûòÎ°ú ÎÇòÎàïÎãàÎã§.</td>
  </tr>
  <tr>
  <td><strong>Ïä¨Î°Ø<br />Ï±ÑÏö∞Í∏∞</strong></td>
  <td>ÏÇ¨Ïö©Ïûê ÏûÖÎ†•(ÌÖçÏä§Ìä∏ ÎòêÎäî Î≤ÑÌäº ÌÅ¥Î¶≠)ÏùÑ Î∞õÏïÑ ÌäπÏ†ï Î≥ÄÏàò(Slot)Ïóê Ï†ÄÏû•ÌïòÎäî Îç∞ ÏÇ¨Ïö©Îê©ÎãàÎã§.</td>
  </tr>
  <tr>
  <td><strong>API</strong></td>
  <td>Ïô∏Î∂Ä APIÎ•º Ìò∏Ï∂úÌï©ÎãàÎã§. ÏöîÏ≤≠(URL, Ìó§Îçî, Î≥∏Î¨∏) Ïãú Ïä¨Î°Ø Í∞íÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏúºÎ©∞, JSON ÏùëÎãµÏùò ÏùºÎ∂ÄÎ•º Îã§Ïãú Ïä¨Î°ØÏóê Ï†ÄÏû•Ìï† Ïàò ÏûàÏäµÎãàÎã§. ÏÑ±Í≥µ/Ïã§Ìå® Î∂ÑÍ∏∞ Î∞è Îã§Ï§ë API Î≥ëÎ†¨ ÏöîÏ≤≠ÏùÑ ÏßÄÏõêÌï©ÎãàÎã§.</td>
  </tr>
  <tr>
  <td><strong>LLM</strong></td>
  <td>Í±∞ÎåÄ Ïñ∏Ïñ¥ Î™®Îç∏Í≥º Ïó∞ÎèôÌïòÏó¨ Ïä¨Î°Ø Í∞íÏùÑ ÏÇ¨Ïö©Ìïú ÎèôÏ†Å ÌîÑÎ°¨ÌîÑÌä∏Î•º Í∏∞Î∞òÏúºÎ°ú ÌÖçÏä§Ìä∏Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§. ÏÉùÏÑ±Îêú ÏùëÎãµ ÎÇ¥Ïö©Ïùò ÌÇ§ÏõåÎìúÏóê Îî∞Îùº ÌùêÎ¶ÑÏùÑ Î∂ÑÍ∏∞Ìï† Ïàò ÏûàÏúºÎ©∞, Ï†ÑÏ≤¥ ÏùëÎãµÏùÑ Ïä¨Î°ØÏóê Ï†ÄÏû•Ìï† Ïàò ÏûàÏäµÎãàÎã§.</td>
  </tr>
  <tr>
  <td><strong>Ïä¨Î°Ø<br/>ÏÑ§Ï†ï</strong></td>
  <td>ÌïòÎÇò Ïù¥ÏÉÅÏùò Ïä¨Î°Ø Í∞íÏùÑ Í≥†Ï†ï Í∞í ÎòêÎäî Îã§Î•∏ Ïä¨Î°Ø Í∞íÏúºÎ°ú ÏßÅÏ†ë ÏÑ§Ï†ïÌïòÍ±∞ÎÇò ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§. Î¨∏ÏûêÏó¥, Ïà´Ïûê, boolean, JSON Í∞ùÏ≤¥/Î∞∞Ïó¥ ÌÉÄÏûÖÏùÑ ÏßÄÏõêÌï©ÎãàÎã§.</td>
  </tr>
  {/* --- üëá [Ï∂îÍ∞Ä] Delay Node --- */}
  <tr>
    <td><strong>ÎîúÎ†àÏù¥</strong></td>
    <td>Îã§Ïùå ÎÖ∏ÎìúÎ°ú ÏßÑÌñâÌïòÍ∏∞ Ï†ÑÏóê ÏßÄÏ†ïÎêú ÏãúÍ∞Ñ(Î∞ÄÎ¶¨Ï¥à Îã®ÏúÑ) ÎèôÏïà ÎåÄÌôî ÌùêÎ¶ÑÏùÑ ÏùºÏãú Ï§ëÏßÄÌï©ÎãàÎã§. ÏßÄÏó∞ ÏãúÍ∞Ñ ÎèôÏïà ÏÇ¨Ïö©ÏûêÏóêÍ≤åÎäî ÏïÑÎ¨¥ Î©îÏãúÏßÄÎèÑ ÌëúÏãúÎêòÏßÄ ÏïäÏäµÎãàÎã§.</td>
  </tr>
  {/* --- üëÜ [Ï∂îÍ∞Ä ÎÅù] --- */}
  <tr>
  <td><strong>ÎßÅÌÅ¨</strong></td>
  <td>Ïô∏Î∂Ä ÏõπÏÇ¨Ïù¥Ìä∏ ÎßÅÌÅ¨Î•º ÏÇ¨Ïö©ÏûêÏóêÍ≤å Ï†ÑÎã¨ÌïòÎ©∞, ÏÑ†ÌÉùÏ†ÅÏúºÎ°ú ÏÉà ÌÉ≠ÏóêÏÑú Ïó¥ Ïàò ÏûàÏäµÎãàÎã§.</td>
  </tr>
  <tr>
  <td><strong>ÌÜ†Ïä§Ìä∏</strong></td>
  <td>ÏãúÎÆ¨Î†àÏù¥ÌÑ∞ ÎÇ¥ÏóêÏÑú ÏÇ¨Ïö©ÏûêÏóêÍ≤å Î∞©Ìï¥ÎêòÏßÄ ÏïäÎäî ÏûëÏùÄ ÌåùÏóÖ Î©îÏãúÏßÄ(Ï†ïÎ≥¥, ÏÑ±Í≥µ, Ïò§Î•ò)Î•º ÌëúÏãúÌï©ÎãàÎã§. ÎåÄÌôî ÌùêÎ¶ÑÏùÑ Ï§ëÎã®ÏãúÌÇ§ÏßÄ ÏïäÏäµÎãàÎã§.</td>
  </tr>
   <tr>
  <td><strong>iFrame</strong></td>
  <td>iframeÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ Ïô∏Î∂Ä ÏõπÌéòÏù¥ÏßÄÎ•º Ï±óÎ¥á Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ ÎÇ¥Ïóê ÏßÅÏ†ë ÏÇΩÏûÖÌïòÎ©∞, ÌÅ¨Í∏∞Î•º Ï°∞Ï†àÌï† Ïàò ÏûàÏäµÎãàÎã§.</td>
  </tr>
 </tbody>
 </table>

 <h2>6. ÏãúÎÇòÎ¶¨Ïò§ Ìé∏Ïßë Î∞è ÌÖåÏä§Ìä∏</h2>
 <h3>6.1. ÎÖ∏Îìú Ìé∏Ïßë</h3>
 <ol>
 <li>Ï∫îÎ≤ÑÏä§ÏóêÏÑú Ìé∏ÏßëÌïòÍ≥† Ïã∂ÏùÄ ÎÖ∏ÎìúÎ•º ÌÅ¥Î¶≠Ìï©ÎãàÎã§.</li>
 <li>Ïö∞Ï∏°Ïóê ÎÇòÌÉÄÎÇòÎäî <strong>Ïª®Ìä∏Î°§Îü¨ Ìå®ÎÑê</strong>ÏóêÏÑú ÎÖ∏ÎìúÏùò ÌÖçÏä§Ìä∏, Î≤ÑÌäº, ÏñëÏãù ÏöîÏÜå, API Ï†ïÎ≥¥ Îì±ÏùÑ ÏàòÏ†ïÌï©ÎãàÎã§.</li>
 <li>Ìé∏ÏßëÏù¥ ÎÅùÎÇòÎ©¥ Ïª®Ìä∏Î°§Îü¨ Ìå®ÎÑê ÌïòÎã®Ïùò <code>Save Changes</code> Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ Î≥ÄÍ≤Ω ÏÇ¨Ìï≠ÏùÑ ÎÖ∏ÎìúÏóê Ï†ÅÏö©Ìï©ÎãàÎã§.</li>
 </ol>

 <h3>6.2. Ïä¨Î°Ø(Î≥ÄÏàò) ÏÇ¨Ïö©ÌïòÍ∏∞</h3>
 <p>Ïä¨Î°ØÏùÄ ÏãúÎÇòÎ¶¨Ïò§ ÎÇ¥ÏóêÏÑú Ï†ïÎ≥¥Î•º Ï†ÄÏû•ÌïòÍ≥† Ïû¨ÏÇ¨Ïö©ÌïòÍ∏∞ ÏúÑÌïú Î≥ÄÏàòÏûÖÎãàÎã§. ÏÇ¨Ïö©Ïûê ÏûÖÎ†•, API ÏùëÎãµ, LLM Ï∂úÎ†•, ÏÑ†ÌÉùÎêú Í∑∏Î¶¨Îìú Ìñâ Îç∞Ïù¥ÌÑ∞ Îì±ÏùÑ Ï†ÄÏû•ÌïòÍ±∞ÎÇò ÏßÅÏ†ë ÏÑ§Ï†ïÌï† Ïàò ÏûàÏäµÎãàÎã§.</p>
 {/* --- üëá [ÏàòÏ†ï] Slot Íµ¨Î¨∏ ÏÑ§Î™Ö ÌÜµÏùº --- */}
 <p>ÎÖ∏Îìú ÎÇ¥Ïö©(Î©îÏãúÏßÄ, ÌîÑÎ°¨ÌîÑÌä∏, URL, API Î≥∏Î¨∏ Îì±) ÏïàÏóêÏÑú Ï†ÄÏû•Îêú Ïä¨Î°Ø Í∞íÏùÑ ÏÇ¨Ïö©ÌïòÎ†§Î©¥ <strong>Îã®Ïùº Ï§ëÍ¥ÑÌò∏ ÌëúÍ∏∞Î≤ï</strong>: <code>{'{Ïä¨Î°ØÏù¥Î¶Ñ}'}</code>ÏùÑ ÏÇ¨Ïö©Ìï©ÎãàÎã§.</p>
 <p><strong>ÏòàÏãú:</strong> <code>userName</code>Ïù¥ÎùºÎäî Ïä¨Î°ØÏóê ÏÇ¨Ïö©Ïûê Ïù¥Î¶ÑÏùÑ Ï†ÄÏû•ÌñàÎã§Î©¥, Î©îÏãúÏßÄ ÎÖ∏ÎìúÏóêÏÑú <code>ÏïàÎÖïÌïòÏÑ∏Ïöî, {'{userName}'}Îãò!</code> Í≥º Í∞ôÏù¥ ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§. Ï∫îÎ≤ÑÏä§ Ï¢åÏ∏° ÏÉÅÎã®Ïùò Ïä¨Î°Ø ÌëúÏãú Ìå®ÎÑêÏùÄ ÏãúÎÆ¨Î†àÏù¥ÏÖò Ï§ë ÌòÑÏû¨ Î™®Îì† Ïä¨Î°ØÏùò Í∞íÏùÑ Î≥¥Ïó¨Ï§çÎãàÎã§.</p>
 {/* --- üëÜ [ÏàòÏ†ï ÎÅù] --- */}

 <h4>6.2.1. ÎèôÏ†Å ÏòµÏÖò/Îç∞Ïù¥ÌÑ∞ (Ïä¨Î°Ø Î∞îÏù∏Îî©)</h4>
 <p><strong>Form</strong> ÎÖ∏ÎìúÏóêÏÑú, Î∞∞Ïó¥ÏùÑ Îã¥Í≥† ÏûàÎäî Ïä¨Î°ØÏùÑ Ïù¥Ïö©ÌïòÏó¨ <strong>Dropbox</strong> ÏöîÏÜåÏùò ÏÑ†ÌÉùÏßÄÎÇò <strong>Grid</strong> ÏöîÏÜåÏùò Îç∞Ïù¥ÌÑ∞Î•º ÎèôÏ†ÅÏúºÎ°ú Ï±ÑÏö∏ Ïàò ÏûàÏäµÎãàÎã§.</p>
 <ul>
    <li><strong>Îç∞Ïù¥ÌÑ∞ ÌòïÏãù</strong>: Ïä¨Î°ØÏùÄ Î∞òÎìúÏãú Î∞∞Ïó¥ ÌòïÌÉúÏó¨Ïïº Ìï©ÎãàÎã§. DropboxÏùò Í≤ΩÏö∞ Î¨∏ÏûêÏó¥ ÎòêÎäî <code>label</code>/<code>value</code> Í∞ùÏ≤¥ Î∞∞Ïó¥, GridÏùò Í≤ΩÏö∞ ÏùºÎ∞òÏ†ÅÏúºÎ°ú Í∞ùÏ≤¥ Î∞∞Ïó¥ ÌòïÌÉúÏûÖÎãàÎã§.</li>
    <li><strong>ÏÑ§Ï†ï Î∞©Î≤ï</strong>:
        <ol>
            <li>Form ÎÖ∏Îìú Ïª®Ìä∏Î°§Îü¨ÏóêÏÑú Dropbox ÎòêÎäî Grid ÏöîÏÜåÎ•º ÏÑ†ÌÉùÌï©ÎãàÎã§.</li>
            <li>'Options Slot'(Dropbox) ÎòêÎäî 'Data Slot'(Grid) ÌïÑÎìúÏóê Î∞∞Ïó¥ÏùÑ Îã¥Í≥† ÏûàÎäî Ïä¨Î°Ø Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï©ÎãàÎã§(Ïòà: <code>user_list</code>).</li>
            <li>(Grid Ï†ÑÏö©) ÏÑ†ÌÉùÏ†ÅÏúºÎ°ú 'Display Labels'(ÏâºÌëúÎ°ú Íµ¨Î∂ÑÎêú ÌÇ§ Î™©Î°ù)ÏùÑ ÏßÄÏ†ïÌïòÏó¨ ÌäπÏ†ï Ïó¥Îßå ÌëúÏãúÌïòÍ≥†, 'Hide Columns with Null Values'Î•º Ï≤¥ÌÅ¨Ìï† Ïàò ÏûàÏäµÎãàÎã§.</li>
            <li>Ïä¨Î°ØÏù¥ ÎπÑÏñ¥ÏûàÍ±∞ÎÇò Ïú†Ìö®ÌïòÏßÄ ÏïäÏúºÎ©¥ ÏàòÎèôÏúºÎ°ú ÏûÖÎ†•Îêú ÎåÄÏ≤¥(Fallback) ÏòµÏÖò/Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÇ¨Ïö©Îê©ÎãàÎã§.</li>
        </ol>
    </li>
    <li><strong>Grid Ìñâ ÏÑ†ÌÉù</strong>: 'Data Slot'ÏùÑ ÌÜµÌï¥ Ï±ÑÏõåÏßÑ GridÏóêÏÑú ÏÇ¨Ïö©ÏûêÍ∞Ä ÌäπÏ†ï ÌñâÏùÑ ÌÅ¥Î¶≠ÌïòÎ©¥, Ìï¥Îãπ ÌñâÏùò Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Í∞ùÏ≤¥Í∞Ä <code>selectedRow</code>ÎùºÎäî ÌäπÏàò Ïä¨Î°ØÏóê ÏûêÎèôÏúºÎ°ú Ï†ÄÏû•Îê©ÎãàÎã§. Ïù¥ÌõÑ ÎÖ∏ÎìúÏóêÏÑú Ïù¥ Ïä¨Î°Ø Í∞íÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§(Ïòà: <code>{'{selectedRow.userId}'}</code>).</li>
 </ul>

 <h3>6.3. API ÎÖ∏Îìú ÏÇ¨Ïö©ÌïòÍ∏∞</h3>
 <p>API ÎÖ∏ÎìúÎ•º ÏÇ¨Ïö©ÌïòÎ©¥ Ïô∏Î∂Ä ÏÑúÎ≤ÑÏôÄ ÎèôÏ†ÅÏúºÎ°ú ÏÉÅÌò∏ÏûëÏö©Ìï† Ïàò ÏûàÏäµÎãàÎã§.</p>
 <ul>
 <li><strong>Í∞úÎ≥Ñ API ÌÖåÏä§Ìä∏</strong>: Îã®Ïùº API Î™®ÎìúÏóêÏÑúÎäî ÎÖ∏Îìú Ìó§ÎçîÏùò **Ïû¨ÏÉù(‚ñ∂) ÏïÑÏù¥ÏΩò**ÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ ÌòÑÏû¨ Ïä¨Î°Ø Í∞íÏúºÎ°ú Ìï¥Îãπ APIÎ•º Ï¶âÏãú ÌÖåÏä§Ìä∏Ìï©ÎãàÎã§. Îã§Ï§ë API Î™®ÎìúÏóêÏÑúÎäî Ïª®Ìä∏Î°§Îü¨ÏóêÏÑú ÏÑ†ÌÉùÌïú API Ìò∏Ï∂úÏóê ÎåÄÌïú 'Test' Î≤ÑÌäºÏùÑ ÏÇ¨Ïö©Ìï©ÎãàÎã§.</li>
 <li><strong>Îã§Ï§ë API ÏöîÏ≤≠</strong>: Ïª®Ìä∏Î°§Îü¨ÏóêÏÑú 'Enable Multi API'Î•º Ï≤¥ÌÅ¨ÌïòÎ©¥ Ïó¨Îü¨ API ÏöîÏ≤≠ÏùÑ Î≥ëÎ†¨Î°ú Î≥¥ÎÇº Ïàò ÏûàÏäµÎãàÎã§. Í∞Å Ìò∏Ï∂úÏùÑ Ï∂îÍ∞ÄÌïòÍ≥† Í∞úÎ≥ÑÏ†ÅÏúºÎ°ú ÏÑ§Ï†ïÌï©ÎãàÎã§. *Î™®Îì†* Ìò∏Ï∂úÏù¥ ÏÑ±Í≥µÌï¥Ïïº 'On Success'Î°ú ÏßÑÌñâÎêòÎ©∞, ÌïòÎÇòÎùºÎèÑ Ïã§Ìå®ÌïòÎ©¥ 'On Error'Î°ú ÏßÑÌñâÎê©ÎãàÎã§.</li>
 {/* --- üëá [ÏàòÏ†ï] Slot Íµ¨Î¨∏ ÏÑ§Î™Ö ÏàòÏ†ï --- */}
 <li><strong>ÎèôÏ†Å ÏöîÏ≤≠</strong>: URL, Headers(JSON Î¨∏ÏûêÏó¥ Í∞í), Body(JSON Î¨∏ÏûêÏó¥ Í∞í) ÌïÑÎìúÏóê Ïä¨Î°Ø(Ïòà: <code>{'{userId}'}</code>)ÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ ÎèôÏ†ÅÏù∏ APIÎ•º Ìò∏Ï∂úÌï† Ïàò ÏûàÏäµÎãàÎã§.</li>
 {/* --- üëÜ [ÏàòÏ†ï ÎÅù] --- */}
 <li><strong>ÏùëÎãµ Îß§Ìïë</strong>: JSON Path(Ïòà: <code>data.user.name</code>, <code>data.items[0].product</code>)Î•º ÏÇ¨Ïö©ÌïòÏó¨ JSON ÏùëÎãµÏóêÏÑú Í∞íÏùÑ Ï∂îÏ∂úÌïòÍ≥† ÏßÄÏ†ïÎêú Ïä¨Î°ØÏóê Ï†ÄÏû•Ìï©ÎãàÎã§.</li>
 <li><strong>ÏÑ±Í≥µ/Ïã§Ìå® Î∂ÑÍ∏∞</strong>: ÏÑ±Í≥µ ÏãúÏóêÎäî <code>On Success</code> Ìï∏Îì§(ÎÖπÏÉâ)ÏóêÏÑú, Ïã§Ìå® ÏãúÏóêÎäî <code>On Error</code> Ìï∏Îì§(Îπ®Í∞ÑÏÉâ)ÏóêÏÑú Îã§Ïùå ÎÖ∏ÎìúÎ°ú Ïó∞Í≤∞Ìï©ÎãàÎã§.</li>
 </ul>

 <h3>6.4. LLM ÎÖ∏Îìú ÏÇ¨Ïö©ÌïòÍ∏∞</h3>
 <p>LLM ÎÖ∏ÎìúÎäî Ïä¨Î°Ø Í∞í(<code>{'{topic}'}</code> Îì±)ÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ ÎèôÏ†Å ÌîÑÎ°¨ÌîÑÌä∏Î•º Í±∞ÎåÄ Ïñ∏Ïñ¥ Î™®Îç∏Ïóê Î≥¥ÎÇ¥Í≥† ÏùëÎãµÏùÑ ÌëúÏãúÌï©ÎãàÎã§.</p>
 <ul>
    <li><strong>Ï∂úÎ†• Î≥ÄÏàò (Output Variable)</strong>: LLMÏùò Ï†ÑÏ≤¥ ÏùëÎãµ ÌÖçÏä§Ìä∏Î•º ÏßÄÏ†ïÎêú Ïä¨Î°ØÏóê Ï†ÄÏû•Ìï©ÎãàÎã§.</li>
    <li><strong>Ï°∞Í±¥Î∂Ä Î∂ÑÍ∏∞ (Conditional Branching)</strong>: 'ÌÇ§ÏõåÎìú' Í∏∞Î∞ò Ï°∞Í±¥ÏùÑ Ï∂îÍ∞ÄÌï©ÎãàÎã§. ÏùëÎãµÏóê ÌÇ§ÏõåÎìúÍ∞Ä Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏúºÎ©¥ Ìï¥Îãπ Ìï∏Îì§Î°ú, ÏóÜÏúºÎ©¥ 'Default' Ìï∏Îì§Î°ú ÌùêÎ¶ÑÏù¥ Î∂ÑÍ∏∞Îê©ÎãàÎã§.</li>
 </ul>

 <h3>6.5. ÎÖ∏Îìú Ïó∞Í≤∞</h3>
 <ul>
 <li>ÎÖ∏Îìú Í∞ÄÏû•ÏûêÎ¶¨Ïùò Ìï∏Îì§(Ïõê)ÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ Îã§Î•∏ ÎÖ∏ÎìúÏùò Ìï∏Îì§Î°ú ÎìúÎûòÍ∑∏ÌïòÏó¨ Ïó∞Í≤∞Ìï©ÎãàÎã§.</li>
 <li><strong>Ï°∞Í±¥ Î∂ÑÍ∏∞/API/LLM ÎÖ∏Îìú</strong>: Î≤ÑÌäº ÌÅ¥Î¶≠, Ï°∞Í±¥, ÏÑ±Í≥µ/Ïã§Ìå®, ÌÇ§ÏõåÎìú Îì± Îã§ÏñëÌïú Í≤∞Í≥ºÏóê Îî∞Îùº Ïó¨Îü¨ Í∞úÏùò ÏÜåÏä§ Ìï∏Îì§ÏùÑ Í∞ÄÏßëÎãàÎã§. Ìï∏Îì§ ÏúÑÏóê ÎßàÏö∞Ïä§Î•º Ïò¨Î¶¨Î©¥ Ïö©ÎèÑÎ•º ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.</li>
 </ul>

 <h3>6.6. ÎÖ∏Îìú Î∞è Ïó∞Í≤∞ÏÑ† ÏÇ≠Ï†ú/Î≥µÏ†ú</h3>
 <ul>
 <li><strong>ÎÖ∏Îìú ÏÇ≠Ï†ú</strong>: ÎÖ∏Îìú Ïö∞Ï∏° ÏÉÅÎã®Ïùò <code>x</code> ÏïÑÏù¥ÏΩòÏùÑ ÌÅ¥Î¶≠Ìï©ÎãàÎã§.</li>
 <li><strong>Ïó∞Í≤∞ÏÑ† ÏÇ≠Ï†ú</strong>: Ïó∞Í≤∞ÏÑ† ÏûêÏ≤¥Î•º ÌÅ¥Î¶≠ÌïòÏó¨ ÏÑ†ÌÉùÌïú ÌõÑ <code>Backspace</code> ÎòêÎäî <code>Delete</code> ÌÇ§Î•º ÎàÑÎ¶ÖÎãàÎã§.</li>
 <li><strong>ÎÖ∏Îìú Î≥µÏ†ú</strong>: Î≥µÏ†úÌï† ÎÖ∏ÎìúÎ•º ÏÑ†ÌÉùÌïú ÌõÑ, Ï¢åÏ∏° Ìå®ÎÑê ÌïòÎã®Ïùò <code>+ Duplicate Node</code> Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠Ìï©ÎãàÎã§.</li>
 </ul>

 <h3>6.7. ÎÖ∏Îìú Î∞è ÏãúÎÇòÎ¶¨Ïò§ Í∑∏Î£π Í¥ÄÎ¶¨</h3>
 <p>ÏãúÎÇòÎ¶¨Ïò§Ïùò ÏùºÎ∂Ä ÎòêÎäî Ï†ÑÏ≤¥Î•º Ìö®Ïú®Ï†ÅÏúºÎ°ú Ïû¨ÏÇ¨Ïö©Ìï©ÎãàÎã§.</p>
 <ul>
  <li><strong>ÎÖ∏Îìú ÎÇ¥Î≥¥ÎÇ¥Í∏∞/Í∞ÄÏ†∏Ïò§Í∏∞</strong>: ÎÖ∏ÎìúÎì§ÏùÑ ÏÑ†ÌÉù(Shift+ÌÅ¥Î¶≠)ÌïòÍ≥† <code>Export Nodes</code>Î°ú Î≥µÏÇ¨Ìïú Îí§, Îã§Î•∏ (ÎòêÎäî Í∞ôÏùÄ) ÏãúÎÇòÎ¶¨Ïò§ÏóêÏÑú <code>Import Nodes</code>Î°ú Î∂ôÏó¨ÎÑ£ÏäµÎãàÎã§.</li>
  <li><strong>ÏãúÎÇòÎ¶¨Ïò§ Í∑∏Î£πÏúºÎ°ú Í∞ÄÏ†∏Ïò§Í∏∞</strong>: <code>+ Scenario Group</code> Î≤ÑÌäºÏùÑ ÎàÑÎ•¥Í≥† Î™©Î°ùÏóêÏÑú ÏãúÎÇòÎ¶¨Ïò§Î•º ÏÑ†ÌÉùÌïòÎ©¥, Ìï¥Îãπ ÏãúÎÇòÎ¶¨Ïò§ Ï†ÑÏ≤¥Í∞Ä ÌïòÎÇòÏùò Ï†ëÏùÑ Ïàò ÏûàÎäî Í∑∏Î£π ÎÖ∏ÎìúÎ°ú Ï∫îÎ≤ÑÏä§Ïóê Ï∂îÍ∞ÄÎê©ÎãàÎã§. ÏùºÎ∞ò ÎÖ∏ÎìúÏ≤òÎüº ÏûÖ/Ï∂úÎ†• Ìï∏Îì§ÏùÑ Ïó∞Í≤∞ÌïòÏó¨ ÏÇ¨Ïö©Ìï©ÎãàÎã§.</li>
 </ul>

 {/* --- üëá [Ï∂îÍ∞Ä] Start Node ÏÑ§Î™Ö --- */}
 <h3>6.8. ÏãúÏûë ÎÖ∏Îìú ÏÑ§Ï†ï</h3>
 <ul>
  <li>ÏãúÎÆ¨Î†àÏù¥ÏÖòÏùÑ ÏãúÏûëÌï† ÎÖ∏ÎìúÏùò Ìó§ÎçîÏóê ÏûàÎäî **Ïû¨ÏÉù(‚ñ∂) ÏïÑÏù¥ÏΩò**ÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ ÏãúÏûë ÎÖ∏ÎìúÎ°ú ÏßÄÏ†ïÌï©ÎãàÎã§.</li>
  <li>ÏßÄÏ†ïÎêú ÏãúÏûë ÎÖ∏ÎìúÎäî **ÎÖπÏÉâ ÌÖåÎëêÎ¶¨ÏôÄ Í∑∏Î¶ºÏûê**Î°ú ÌëúÏãúÎê©ÎãàÎã§.</li>
  <li>Í∞ôÏùÄ ÎÖ∏ÎìúÏùò Ïû¨ÏÉù ÏïÑÏù¥ÏΩòÏùÑ Îã§Ïãú ÌÅ¥Î¶≠ÌïòÎ©¥ ÏãúÏûë ÎÖ∏Îìú ÏßÄÏ†ïÏù¥ Ìï¥Ï†úÎê©ÎãàÎã§.</li>
  <li>ÏãúÏûë ÎÖ∏ÎìúÎ•º Î™ÖÏãúÏ†ÅÏúºÎ°ú ÏßÄÏ†ïÌïòÏßÄ ÏïäÏúºÎ©¥, Îì§Ïñ¥Ïò§Îäî Ïó∞Í≤∞Ïù¥ ÏóÜÎäî ÎÖ∏ÎìúÏóêÏÑú ÏãúÎÆ¨Î†àÏù¥ÏÖòÏù¥ ÏãúÏûëÎê©ÎãàÎã§.</li>
  <li>ÌòÑÏû¨ ÏÑ§Ï†ïÎêú ÏãúÏûë ÎÖ∏Îìú IDÎäî ÏãúÎÇòÎ¶¨Ïò§ Îç∞Ïù¥ÌÑ∞ÏôÄ Ìï®Íªò Ï†ÄÏû•Îê©ÎãàÎã§.</li>
 </ul>
 {/* --- üëÜ [Ï∂îÍ∞Ä ÎÅù] --- */}

 <h3>6.9. Ï†ÄÏû• Î∞è ÌÖåÏä§Ìä∏</h3>
 <ul>
 <li><strong>Ï†ÄÏû•</strong>: ÌôîÎ©¥ Ïö∞Ï∏° ÏÉÅÎã®Ïùò Ï†ÄÏû• ÏïÑÏù¥ÏΩò(üíæ)ÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ ÌòÑÏû¨ ÏãúÎÇòÎ¶¨Ïò§ Íµ¨Ï°∞(ÏãúÏûë ÎÖ∏Îìú ID Ìè¨Ìï®)Î•º ÏÑ†ÌÉùÎêú Î∞±ÏóîÎìú(Firebase/FastAPI)Ïóê Ï†ÄÏû•Ìï©ÎãàÎã§.</li>
 <li><strong>ÌÖåÏä§Ìä∏</strong>: Ï±óÎ¥á ÏïÑÏù¥ÏΩò(ü§ñ)ÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ ÏãúÎÆ¨Î†àÏù¥ÌÑ∞ Ìå®ÎÑêÏùÑ Ïó¥Í≥† Îã´ÏäµÎãàÎã§. ÏãúÎÆ¨Î†àÏù¥ÌÑ∞ Ìó§ÎçîÏùò 'Start' Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ ÏßÄÏ†ïÎêú ÏãúÏûë ÎÖ∏Îìú(ÎòêÎäî Ï∂îÎ°†Îêú ÏãúÏûë ÎÖ∏Îìú)Î∂ÄÌÑ∞ ÌÖåÏä§Ìä∏Î•º ÏãúÏûëÌï©ÎãàÎã§.</li>
 </ul>
</>
);

// --- üëá [ÏàòÏ†ï] Î≤†Ìä∏ÎÇ®Ïñ¥ Î≤àÏó≠ (Delay Node Ï∂îÍ∞Ä, Slot Íµ¨Î¨∏ ÏàòÏ†ï, Start Node ÏÑ§Î™Ö Ï∂îÍ∞Ä Îì±) ---
const HelpManual_vi = () => (
<>
 <h2>1. B·∫Øt ƒë·∫ßu</h2>
 <h3>1.1. ƒêƒÉng nh·∫≠p</h3>
 <ul>
 <li>B·∫°n ph·∫£i ƒëƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n Google ƒë·ªÉ s·ª≠ d·ª•ng d·ªãch v·ª•.</li>
 <li>Ch·ªâ nh·ªØng ng∆∞·ªùi d√πng c√≥ <strong>email v√† t√™n mi·ªÅn ƒë∆∞·ª£c ·ªßy quy·ªÅn</strong> (<code>cyberlogitec.com</code>, <code>wisenut.co.kr</code>) m·ªõi c√≥ th·ªÉ truy c·∫≠p d·ªãch v·ª•.</li>
 </ul>
 <h3>1.2. M√†n h√¨nh ch√≠nh</h3>
 <ul>
 <li><strong>Tr√¨nh ch·ªânh s·ª≠a lu·ªìng (Flow Editor)</strong>: Kh√¥ng gian l√†m vi·ªác ch√≠nh ƒë·ªÉ t·∫°o v√† ch·ªânh s·ª≠a lu·ªìng h·ªôi tho·∫°i c·ªßa chatbot m·ªôt c√°ch tr·ª±c quan.</li>
 <li><strong>B·∫£ng tin (Board)</strong>: Cung c·∫•p t√≠nh nƒÉng b·∫£ng tin ƒë∆°n gi·∫£n ƒë·ªÉ gi√∫p ng∆∞·ªùi d√πng giao ti·∫øp v·ªõi nhau.</li>
 <li><strong>T√†i li·ªáu API (API Docs)</strong>: Hi·ªÉn th·ªã th√¥ng s·ªë k·ªπ thu·∫≠t API ƒë·ªÉ qu·∫£n l√Ω c√°c k·ªãch b·∫£n.</li>
 <li><strong>C√¥ng t·∫Øc Backend</strong>: N·∫±m ·ªü ti√™u ƒë·ªÅ tr√™n c√πng b√™n ph·∫£i, c√¥ng t·∫Øc n√†y cho ph√©p b·∫°n chuy·ªÉn ƒë·ªïi gi·ªØa c√°c backend <strong>Firebase</strong> v√† <strong>FastAPI</strong> ƒë·ªÉ l∆∞u tr·ªØ v√† qu·∫£n l√Ω d·ªØ li·ªáu k·ªãch b·∫£n.</li>
 </ul>

 <h2>2. Qu·∫£n l√Ω k·ªãch b·∫£n</h2>
 <p>M√†n h√¨nh ƒë·∫ßu ti√™n b·∫°n th·∫•y sau khi ƒëƒÉng nh·∫≠p l√† <strong>Danh s√°ch k·ªãch b·∫£n</strong>.</p>
 <ul>
 <li><strong>Th√™m k·ªãch b·∫£n m·ªõi</strong>: Nh·∫•p v√†o n√∫t <code>+ Th√™m k·ªãch b·∫£n m·ªõi</code>, nh·∫≠p t√™n k·ªãch b·∫£n v√† ch·ªçn lo·∫°i c√¥ng vi·ªác (job type) ƒë·ªÉ t·∫°o m·ªôt lu·ªìng h·ªôi tho·∫°i m·ªõi.</li>
 <li><strong>Ch·ªçn k·ªãch b·∫£n</strong>: Nh·∫•p v√†o t√™n k·ªãch b·∫£n trong danh s√°ch ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh ch·ªânh s·ª≠a c·ªßa k·ªãch b·∫£n ƒë√≥.</li>
 <li><strong>Ch·ªânh s·ª≠a/Sao ch√©p/X√≥a k·ªãch b·∫£n</strong>: S·ª≠ d·ª•ng bi·ªÉu t∆∞·ª£ng <code>Ch·ªânh s·ª≠a</code> ƒë·ªÉ thay ƒë·ªïi t√™n ho·∫∑c lo·∫°i c√¥ng vi·ªác, bi·ªÉu t∆∞·ª£ng <code>Sao ch√©p</code> ƒë·ªÉ nh√¢n b·∫£n k·ªãch b·∫£n v·ªõi t√™n m·ªõi, ho·∫∑c bi·ªÉu t∆∞·ª£ng <code>X√≥a</code> ƒë·ªÉ x√≥a vƒ©nh vi·ªÖn k·ªãch b·∫£n.</li>
 </ul>

  <h2>3. C√°ch s·ª≠ d·ª•ng B·∫£ng tin</h2>
  <ul>
    <li>B·∫°n c√≥ th·ªÉ vi·∫øt b√†i m·ªõi, ƒë√≠nh k√®m h√¨nh ·∫£nh ho·∫∑c t·ªáp tin.</li>
    <li>B·∫°n ch·ªâ c√≥ th·ªÉ ch·ªânh s·ª≠a ho·∫∑c x√≥a c√°c b√†i ƒëƒÉng do ch√≠nh b·∫°n t·∫°o.</li>
  </ul>

 <h2>4. B·ªë c·ª•c m√†n h√¨nh Tr√¨nh ch·ªânh s·ª≠a lu·ªìng</h2>
 <ol>
 <li><strong>B·∫£ng th√™m Node (B√™n tr√°i)</strong>: Th√™m c√°c lo·∫°i node kh√°c nhau t·∫°o n√™n k·ªãch b·∫£n v√†o canvas.</li>
 <li><strong>Canvas (·ªû gi·ªØa)</strong>: Kh√¥ng gian ƒë·ªÉ ƒë·∫∑t c√°c node v√† k·∫øt n·ªëi ch√∫ng ƒë·ªÉ t·∫°o ra c√°c lu·ªìng h·ªôi tho·∫°i th·ª±c t·∫ø. M·ªôt <strong>B·∫£n ƒë·ªì thu nh·ªè (Minimap)</strong> c√≥ s·∫µn ·ªü g√≥c d∆∞·ªõi c√πng b√™n ph·∫£i ƒë·ªÉ d·ªÖ d√†ng ƒëi·ªÅu h∆∞·ªõng.</li>
 <li><strong>B·∫£ng ƒëi·ªÅu khi·ªÉn (B√™n ph·∫£i)</strong>: ƒê∆∞·ª£c k√≠ch ho·∫°t khi b·∫°n ch·ªçn m·ªôt node tr√™n canvas, cho ph√©p b·∫°n ch·ªânh s·ª≠a n·ªôi dung chi ti·∫øt c·ªßa node ƒë√≥.</li>
 <li><strong>Tr√¨nh m√¥ ph·ªèng (B√™n ph·∫£i)</strong>: C√≥ th·ªÉ ƒë∆∞·ª£c k√≠ch ho·∫°t b·∫±ng c√°ch nh·∫•p v√†o bi·ªÉu t∆∞·ª£ng <code><img src="/images/chat_simulator.png" alt="chatbot" style={{ width: '24px', height: '24px' }}/></code> ƒë·ªÉ ki·ªÉm tra xem k·ªãch b·∫£n b·∫°n ƒë√£ vi·∫øt ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o trong th·ªùi gian th·ª±c nh∆∞ m·ªôt chatbot th·ª±c t·∫ø.</li>
 </ol>

 <h2>5. C√°c lo·∫°i Node v√† ch·ª©c nƒÉng</h2>
 <p>Nh·∫•p v√†o node mong mu·ªën t·ª´ b·∫£ng b√™n tr√°i ƒë·ªÉ th√™m n√≥ v√†o canvas.</p>
 <table className={styles.table}>
 <thead>
  <tr>
  <th>Lo·∫°i Node</th>
  <th>M√¥ t·∫£</th>
  </tr>
 </thead>
 <tbody>
  <tr>
  <td><strong>Tin nh·∫Øn (Message)</strong></td>
  <td>Tin nh·∫Øn vƒÉn b·∫£n c∆° b·∫£n nh·∫•t m√† chatbot g·ª≠i cho ng∆∞·ªùi d√πng. B·∫°n c√≥ th·ªÉ th√™m c√°c n√∫t tr·∫£ l·ªùi nhanh (Quick Replies).</td>
  </tr>
  <tr>
  <td><strong>Bi·ªÉu m·∫´u (Form)</strong></td>
  <td>M·ªôt bi·ªÉu m·∫´u ƒë·ªÉ nh·∫≠n d·ªØ li·ªáu c√≥ c·∫•u tr√∫c t·ª´ ng∆∞·ªùi d√πng (v√≠ d·ª•: vƒÉn b·∫£n, ng√†y th√°ng, h·ªôp ki·ªÉm, danh s√°ch th·∫£ xu·ªëng, l∆∞·ªõi). T√πy ch·ªçn/d·ªØ li·ªáu c√≥ th·ªÉ ƒë∆∞·ª£c ƒëi·ªÅn ƒë·ªông t·ª´ c√°c slot. Vi·ªác ch·ªçn m·ªôt h√†ng trong l∆∞·ªõi ƒë∆∞·ª£c li√™n k·∫øt v·ªõi slot s·∫Ω l∆∞u tr·ªØ d·ªØ li·ªáu h√†ng ƒë√≥ v√†o slot <code>selectedRow</code>.</td>
  </tr>
  <tr>
  <td><strong>Nh√°nh ƒëi·ªÅu ki·ªán (Condition Branch)</strong></td>
  <td>Chia lu·ªìng h·ªôi tho·∫°i th√†nh nhi·ªÅu nh√°nh d·ª±a tr√™n ph·∫£n h·ªìi c·ªßa ng∆∞·ªùi d√πng (n√∫t b·∫•m) ho·∫∑c gi√° tr·ªã c·ªßa slot (ƒëi·ªÅu ki·ªán, bao g·ªìm boolean <code>true</code>/<code>false</code> v√† so s√°nh gi·ªØa c√°c slot).</td>
  </tr>
  <tr>
  <td><strong>ƒêi·ªÅn slot (SlotFilling)</strong></td>
  <td>ƒê∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ nh·∫≠n th√¥ng tin ƒë·∫ßu v√†o c·ªßa ng∆∞·ªùi d√πng (vƒÉn b·∫£n ho·∫∑c nh·∫•p n√∫t) v√† l∆∞u tr·ªØ n√≥ trong c√°c bi·∫øn c·ª• th·ªÉ (Slots).</td>
  </tr>
  <tr>
  <td><strong>API</strong></td>
  <td>G·ªçi m·ªôt API b√™n ngo√†i. B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c gi√° tr·ªã c·ªßa slot trong y√™u c·∫ßu (URL, headers, body) v√† l∆∞u c√°c ph·∫ßn c·ªßa ph·∫£n h·ªìi JSON tr·ªü l·∫°i v√†o c√°c slot. Cho ph√©p ph√¢n nh√°nh d·ª±a tr√™n th√†nh c√¥ng/th·∫•t b·∫°i v√† h·ªó tr·ª£ nhi·ªÅu y√™u c·∫ßu API song song.</td>
  </tr>
  <tr>
  <td><strong>LLM</strong></td>
  <td>K·∫øt n·ªëi v·ªõi m·ªôt m√¥ h√¨nh ng√¥n ng·ªØ l·ªõn ƒë·ªÉ t·∫°o vƒÉn b·∫£n d·ª±a tr√™n m·ªôt l·ªùi nh·∫Øc ƒë·ªông s·ª≠ d·ª•ng gi√° tr·ªã slot. Lu·ªìng c√≥ th·ªÉ ƒë∆∞·ª£c ph√¢n nh√°nh d·ª±a tr√™n c√°c t·ª´ kh√≥a trong ph·∫£n h·ªìi ƒë∆∞·ª£c t·∫°o ra v√† ph·∫£n h·ªìi ƒë·∫ßy ƒë·ªß c√≥ th·ªÉ ƒë∆∞·ª£c l∆∞u v√†o m·ªôt slot.</td>
  </tr>
  <tr>
  <td><strong>ƒê·∫∑t Slot (Set Slot)</strong></td>
  <td>Tr·ª±c ti·∫øp ƒë·∫∑t ho·∫∑c c·∫≠p nh·∫≠t gi√° tr·ªã c·ªßa m·ªôt ho·∫∑c nhi·ªÅu slot b·∫±ng c√°ch s·ª≠ d·ª•ng c√°c gi√° tr·ªã tƒ©nh ho·∫∑c gi√° tr·ªã t·ª´ c√°c slot kh√°c. H·ªó tr·ª£ c√°c ki·ªÉu d·ªØ li·ªáu chu·ªói, s·ªë, boolean v√† ƒë·ªëi t∆∞·ª£ng/m·∫£ng JSON.</td>
  </tr>
  <tr>
    <td><strong>ƒê·ªô tr·ªÖ (Delay)</strong></td>
    <td>T·∫°m d·ª´ng lu·ªìng h·ªôi tho·∫°i trong m·ªôt kho·∫£ng th·ªùi gian x√°c ƒë·ªãnh (t√≠nh b·∫±ng mili gi√¢y) tr∆∞·ªõc khi chuy·ªÉn sang node ti·∫øp theo. Kh√¥ng hi·ªÉn th·ªã b·∫•t k·ª≥ tin nh·∫Øn n√†o cho ng∆∞·ªùi d√πng trong th·ªùi gian tr√¨ ho√£n.</td>
  </tr>
  <tr>
  <td><strong>Li√™n k·∫øt (Link)</strong></td>
  <td>Cung c·∫•p c√°c li√™n k·∫øt trang web b√™n ngo√†i cho ng∆∞·ªùi d√πng, t√πy ch·ªçn m·ªü ch√∫ng trong m·ªôt tab m·ªõi.</td>
  </tr>
   <tr>
  <td><strong>Th√¥ng b√°o nhanh (Toast)</strong></td>
  <td>Hi·ªÉn th·ªã m·ªôt th√¥ng b√°o b·∫≠t l√™n nh·ªè, kh√¥ng ph√¥ tr∆∞∆°ng (th√¥ng tin, th√†nh c√¥ng, l·ªói) cho ng∆∞·ªùi d√πng trong tr√¨nh m√¥ ph·ªèng. N√≥ kh√¥ng l√†m gi√°n ƒëo·∫°n lu·ªìng h·ªôi tho·∫°i.</td>
  </tr>
  <tr>
  <td><strong>iFrame</strong></td>
  <td>Nh√∫ng m·ªôt trang web b√™n ngo√†i tr·ª±c ti·∫øp v√†o giao di·ªán chatbot b·∫±ng iframe, v·ªõi k√≠ch th∆∞·ªõc c√≥ th·ªÉ ƒë·ªãnh c·∫•u h√¨nh.</td>
  </tr>
 </tbody>
 </table>

 <h2>6. Ch·ªânh s·ª≠a v√† ki·ªÉm tra k·ªãch b·∫£n</h2>
 <h3>6.1. Ch·ªânh s·ª≠a Node</h3>
 <ol>
 <li>Nh·∫•p v√†o node b·∫°n mu·ªën ch·ªânh s·ª≠a tr√™n canvas.</li>
 <li>S·ª≠a ƒë·ªïi vƒÉn b·∫£n, n√∫t, c√°c y·∫øu t·ªë bi·ªÉu m·∫´u, chi ti·∫øt API, v.v. c·ªßa node trong <strong>B·∫£ng ƒëi·ªÅu khi·ªÉn</strong> xu·∫•t hi·ªán ·ªü b√™n ph·∫£i.</li>
 <li>Khi ch·ªânh s·ª≠a xong, nh·∫•p v√†o n√∫t <code>L∆∞u thay ƒë·ªïi (Save Changes)</code> ·ªü cu·ªëi b·∫£ng ƒëi·ªÅu khi·ªÉn ƒë·ªÉ √°p d·ª•ng c√°c thay ƒë·ªïi cho node.</li>
 </ol>

 <h3>6.2. S·ª≠ d·ª•ng Slots (Bi·∫øn)</h3>
 <p>Slots l√† c√°c bi·∫øn ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l∆∞u tr·ªØ v√† t√°i s·ª≠ d·ª•ng th√¥ng tin trong m·ªôt k·ªãch b·∫£n. B·∫°n c√≥ th·ªÉ l∆∞u tr·ªØ ƒë·∫ßu v√†o c·ªßa ng∆∞·ªùi d√πng, d·ªØ li·ªáu t·ª´ ph·∫£n h·ªìi API, ƒë·∫ßu ra LLM, h√†ng l∆∞·ªõi ƒë√£ ch·ªçn ho·∫∑c ƒë·∫∑t ch√∫ng tr·ª±c ti·∫øp.</p>
 <p>ƒê·ªÉ s·ª≠ d·ª•ng gi√° tr·ªã slot ƒë√£ l∆∞u trong n·ªôi dung node (nh∆∞ tin nh·∫Øn, l·ªùi nh·∫Øc, URL, body API, v.v.), h√£y s·ª≠ d·ª•ng <strong>k√Ω hi·ªáu d·∫•u ngo·∫∑c nh·ªçn ƒë∆°n</strong>: <code>{'{t√™n_slot}'}</code>.</p>
 <p><strong>V√≠ d·ª•:</strong> N·∫øu b·∫°n ƒë√£ l∆∞u t√™n ng∆∞·ªùi d√πng trong m·ªôt slot c√≥ t√™n l√† <code>userName</code>, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng n√≥ trong m·ªôt node Tin nh·∫Øn nh∆∞ sau: <code>Xin ch√†o, {'{userName}'}! Ch√†o m·ª´ng.</code> B·∫£ng hi·ªÉn th·ªã Slot (ph√≠a tr√™n b√™n tr√°i c·ªßa canvas) hi·ªÉn th·ªã c√°c gi√° tr·ªã hi·ªán t·∫°i c·ªßa t·∫•t c·∫£ c√°c slot trong qu√° tr√¨nh m√¥ ph·ªèng.</p>

 <h4>6.2.1. T√πy ch·ªçn/D·ªØ li·ªáu ƒë·ªông (Li√™n k·∫øt Slot)</h4>
 <p>Trong m·ªôt node <strong>Bi·ªÉu m·∫´u (Form)</strong>, b·∫°n c√≥ th·ªÉ t·ª± ƒë·ªông ƒëi·ªÅn c√°c t√πy ch·ªçn c·ªßa m·ªôt ph·∫ßn t·ª≠ <strong>Dropbox</strong> ho·∫∑c d·ªØ li·ªáu trong m·ªôt ph·∫ßn t·ª≠ <strong>L∆∞·ªõi (Grid)</strong> t·ª´ m·ªôt slot ch·ª©a m·ªôt m·∫£ng.</p>
 <ul>
    <li><strong>ƒê·ªãnh d·∫°ng d·ªØ li·ªáu</strong>: Slot ph·∫£i ch·ª©a m·ªôt m·∫£ng. ƒê·ªëi v·ªõi Dropbox, ƒë√≥ c√≥ th·ªÉ l√† chu·ªói ho·∫∑c ƒë·ªëi t∆∞·ª£ng c√≥ <code>label</code>/<code>value</code>. ƒê·ªëi v·ªõi L∆∞·ªõi, th∆∞·ªùng l√† m·ªôt m·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng.</li>
    <li><strong>C√†i ƒë·∫∑t</strong>:
        <ol>
            <li>Ch·ªçn ph·∫ßn t·ª≠ Dropbox ho·∫∑c L∆∞·ªõi trong b·ªô ƒëi·ªÅu khi·ªÉn Node Bi·ªÉu m·∫´u.</li>
            <li>Trong tr∆∞·ªùng 'Options Slot' (Dropbox) ho·∫∑c 'Data Slot' (L∆∞·ªõi), nh·∫≠p t√™n c·ªßa slot ch·ª©a m·∫£ng (v√≠ d·ª•: <code>user_list</code>).</li>
            <li>(Ch·ªâ L∆∞·ªõi) T√πy ch·ªçn ch·ªâ ƒë·ªãnh 'Display Labels' (c√°c kh√≥a ƒë∆∞·ª£c ph√¢n t√°ch b·∫±ng d·∫•u ph·∫©y) ƒë·ªÉ hi·ªÉn th·ªã c√°c c·ªôt c·ª• th·ªÉ v√† ch·ªçn 'Hide Columns with Null Values'.</li>
            <li>C√°c t√πy ch·ªçn/d·ªØ li·ªáu d·ª± ph√≤ng ƒë∆∞·ª£c nh·∫≠p th·ªß c√¥ng s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng n·∫øu slot tr·ªëng ho·∫∑c kh√¥ng h·ª£p l·ªá.</li>
        </ol>
    </li>
    <li><strong>L·ª±a ch·ªçn h√†ng l∆∞·ªõi</strong>: Khi ng∆∞·ªùi d√πng nh·∫•p v√†o m·ªôt h√†ng trong L∆∞·ªõi ƒë∆∞·ª£c ƒëi·ªÅn th√¥ng qua 'Data Slot', to√†n b·ªô ƒë·ªëi t∆∞·ª£ng d·ªØ li·ªáu cho h√†ng ƒë√≥ s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c l∆∞u tr·ªØ trong m·ªôt slot ƒë·∫∑c bi·ªát c√≥ t√™n l√† <code>selectedRow</code>. Sau ƒë√≥, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng slot n√†y (v√≠ d·ª•: <code>{'{selectedRow.userId}'}</code>) trong c√°c node ti·∫øp theo.</li>
 </ul>

 <h3>6.3. S·ª≠ d·ª•ng Node API</h3>
 <p>Node API cho ph√©p t∆∞∆°ng t√°c ƒë·ªông v·ªõi c√°c m√°y ch·ªß b√™n ngo√†i.</p>
 <ul>
 <li><strong>Ki·ªÉm tra API ri√™ng l·∫ª</strong>: ·ªû ch·∫ø ƒë·ªô API ƒë∆°n, nh·∫•p v√†o bi·ªÉu t∆∞·ª£ng <strong>Ph√°t (‚ñ∂)</strong> tr√™n ti√™u ƒë·ªÅ node ƒë·ªÉ ki·ªÉm tra l·ªánh g·ªçi API c·ª• th·ªÉ ƒë√≥ ngay l·∫≠p t·ª©c b·∫±ng c√°ch s·ª≠ d·ª•ng c√°c gi√° tr·ªã slot hi·ªán t·∫°i. ·ªû ch·∫ø ƒë·ªô ƒëa API, s·ª≠ d·ª•ng n√∫t 'Test' trong b·ªô ƒëi·ªÅu khi·ªÉn cho l·ªánh g·ªçi API ƒë√£ ch·ªçn.</li>
 <li><strong>Y√™u c·∫ßu API ƒëa nhi·ªám</strong>: Ch·ªçn 'Enable Multi API' trong b·ªô ƒëi·ªÅu khi·ªÉn ƒë·ªÉ g·ª≠i nhi·ªÅu y√™u c·∫ßu song song. Th√™m v√† c·∫•u h√¨nh t·ª´ng l·ªánh g·ªçi. Node ch·ªâ ti·∫øp t·ª•c ƒë·∫øn 'On Success' n·∫øu *t·∫•t c·∫£* c√°c l·ªánh g·ªçi th√†nh c√¥ng, n·∫øu kh√¥ng s·∫Ω ƒë·∫øn 'On Error'.</li>
 <li><strong>Y√™u c·∫ßu ƒë·ªông</strong>: S·ª≠ d·ª•ng c√°c slot (v√≠ d·ª•: <code>{'{userId}'}</code>) trong c√°c tr∆∞·ªùng URL, Headers (gi√° tr·ªã chu·ªói JSON) ho·∫∑c Body (gi√° tr·ªã chu·ªói JSON) ƒë·ªÉ th·ª±c hi·ªán c√°c l·ªánh g·ªçi API ƒë·ªông.</li>
 <li><strong>√Ånh x·∫° ph·∫£n h·ªìi (Response Mapping)</strong>: Tr√≠ch xu·∫•t c√°c gi√° tr·ªã t·ª´ ph·∫£n h·ªìi JSON b·∫±ng c√°ch s·ª≠ d·ª•ng ƒê∆∞·ªùng d·∫´n JSON (v√≠ d·ª•: <code>data.user.name</code>, <code>data.items[0].product</code>) v√† l∆∞u ch√∫ng v√†o c√°c slot.</li>
 <li><strong>Ph√¢n nh√°nh th√†nh c√¥ng/th·∫•t b·∫°i</strong>: K·∫øt n·ªëi tay c·∫ßm <code>On Success</code> (m√†u xanh l√°) cho c√°c l·ªánh g·ªçi th√†nh c√¥ng v√† tay c·∫ßm <code>On Error</code> (m√†u ƒë·ªè) cho c√°c l·ªánh g·ªçi kh√¥ng th√†nh c√¥ng ƒë·∫øn c√°c node ti·∫øp theo kh√°c nhau.</li>
 </ul>

 <h3>6.4. S·ª≠ d·ª•ng Node LLM</h3>
 <p>Node LLM g·ª≠i m·ªôt l·ªùi nh·∫Øc ƒë·ªông (s·ª≠ d·ª•ng c√°c slot nh∆∞ <code>{'{topic}'}</code>) ƒë·∫øn m·ªôt m√¥ h√¨nh ng√¥n ng·ªØ l·ªõn v√† hi·ªÉn th·ªã ph·∫£n h·ªìi.</p>
 <ul>
    <li><strong>Bi·∫øn ƒë·∫ßu ra (Output Variable)</strong>: L∆∞u tr·ªØ to√†n b·ªô vƒÉn b·∫£n ph·∫£n h·ªìi LLM v√†o m·ªôt slot ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.</li>
    <li><strong>Ph√¢n nh√°nh c√≥ ƒëi·ªÅu ki·ªán (Conditional Branching)</strong>: Th√™m c√°c ƒëi·ªÅu ki·ªán d·ª±a tr√™n 'T·ª´ kh√≥a'. N·∫øu m·ªôt t·ª´ kh√≥a ƒë∆∞·ª£c t√¨m th·∫•y trong ph·∫£n h·ªìi, lu·ªìng s·∫Ω theo tay c·∫ßm c·ª• th·ªÉ ƒë√≥. N·∫øu kh√¥ng, n√≥ s·∫Ω theo tay c·∫ßm 'M·∫∑c ƒë·ªãnh (Default)'.</li>
 </ul>

 <h3>6.5. K·∫øt n·ªëi Node</h3>
 <ul>
 <li>K√©o t·ª´ c√°c tay c·∫ßm (h√¨nh tr√≤n) tr√™n c√°c c·∫°nh c·ªßa node ƒë·ªÉ k·∫øt n·ªëi ch√∫ng.</li>
 <li><strong>Node Nh√°nh/API/LLM</strong>: C√°c node n√†y c√≥ nhi·ªÅu tay c·∫ßm ngu·ªìn t∆∞∆°ng ·ª©ng v·ªõi c√°c k·∫øt qu·∫£ kh√°c nhau (nh·∫•p n√∫t, ƒëi·ªÅu ki·ªán, th√†nh c√¥ng/l·ªói, t·ª´ kh√≥a). Di chu·ªôt qua m·ªôt tay c·∫ßm ƒë·ªÉ xem m·ª•c ƒë√≠ch c·ªßa n√≥.</li>
 </ul>

 <h3>6.6. X√≥a/Nh√¢n b·∫£n Node v√† K·∫øt n·ªëi</h3>
 <ul>
 <li><strong>X√≥a Node</strong>: Nh·∫•p v√†o bi·ªÉu t∆∞·ª£ng <code>x</code> ·ªü tr√™n c√πng b√™n ph·∫£i c·ªßa node.</li>
 <li><strong>X√≥a k·∫øt n·ªëi</strong>: Nh·∫•p v√†o ch√≠nh ƒë∆∞·ªùng k·∫øt n·ªëi ƒë·ªÉ ch·ªçn n√≥, sau ƒë√≥ nh·∫•n <code>Backspace</code> ho·∫∑c <code>Delete</code>.</li>
 <li><strong>Nh√¢n b·∫£n Node</strong>: Ch·ªçn node b·∫°n mu·ªën sao ch√©p, sau ƒë√≥ nh·∫•p v√†o n√∫t <code>+ Nh√¢n b·∫£n Node (+ Duplicate Node)</code> ·ªü cu·ªëi b·∫£ng b√™n tr√°i.</li>
 </ul>

 <h3>6.7. Qu·∫£n l√Ω Node v√† Nh√≥m k·ªãch b·∫£n</h3>
  <p>T√°i s·ª≠ d·ª•ng c√°c ph·∫ßn c·ªßa k·ªãch b·∫£n ho·∫∑c to√†n b·ªô k·ªãch b·∫£n m·ªôt c√°ch hi·ªáu qu·∫£.</p>
  <ul>
    <li><strong>Xu·∫•t/Nh·∫≠p Node</strong>: Ch·ªçn c√°c node (gi·ªØ Shift + nh·∫•p ƒë·ªÉ ch·ªçn nhi·ªÅu), nh·∫•p v√†o <code>Xu·∫•t Node (Export Nodes)</code> (sao ch√©p v√†o khay nh·ªõ t·∫°m), sau ƒë√≥ chuy·ªÉn ƒë·∫øn k·ªãch b·∫£n kh√°c (ho·∫∑c c√πng k·ªãch b·∫£n) v√† nh·∫•p v√†o <code>Nh·∫≠p Node (Import Nodes)</code> ƒë·ªÉ d√°n.</li>
    <li><strong>K·ªãch b·∫£n d∆∞·ªõi d·∫°ng Nh√≥m</strong>: Nh·∫•p v√†o <code>+ Nh√≥m k·ªãch b·∫£n (+ Scenario Group)</code>, ch·ªçn m·ªôt k·ªãch b·∫£n t·ª´ danh s√°ch. N√≥ s·∫Ω ƒë∆∞·ª£c nh·∫≠p d∆∞·ªõi d·∫°ng m·ªôt node nh√≥m c√≥ th·ªÉ thu g·ªçn duy nh·∫•t ƒë·∫°i di·ªán cho to√†n b·ªô lu·ªìng c·ªßa k·ªãch b·∫£n ƒë√≥. K·∫øt n·ªëi c√°c tay c·∫ßm ƒë·∫ßu v√†o/ƒë·∫ßu ra c·ªßa n√≥ gi·ªëng nh∆∞ m·ªôt node th√¥ng th∆∞·ªùng.</li>
  </ul>

 <h3>6.8. Thi·∫øt l·∫≠p Node B·∫Øt ƒë·∫ßu</h3>
 <ul>
  <li>Nh·∫•p v√†o bi·ªÉu t∆∞·ª£ng **Ph√°t (‚ñ∂)** trong ti√™u ƒë·ªÅ c·ªßa b·∫•t k·ª≥ node n√†o ƒë·ªÉ ch·ªâ ƒë·ªãnh n√≥ l√† ƒëi·ªÉm b·∫Øt ƒë·∫ßu cho m√¥ ph·ªèng.</li>
  <li>Node B·∫Øt ƒë·∫ßu ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh s·∫Ω c√≥ **vi·ªÅn v√† b√≥ng m√†u xanh l√° c√¢y**.</li>
  <li>Nh·∫•p l·∫°i v√†o bi·ªÉu t∆∞·ª£ng Ph√°t tr√™n c√πng m·ªôt node s·∫Ω x√≥a ch·ªâ ƒë·ªãnh Node B·∫Øt ƒë·∫ßu c·ªßa n√≥.</li>
  <li>N·∫øu kh√¥ng c√≥ Node B·∫Øt ƒë·∫ßu n√†o ƒë∆∞·ª£c ƒë·∫∑t r√µ r√†ng, m√¥ ph·ªèng s·∫Ω c·ªë g·∫Øng b·∫Øt ƒë·∫ßu t·ª´ m·ªôt node kh√¥ng c√≥ k·∫øt n·ªëi ƒë·∫øn.</li>
  <li>ID Node B·∫Øt ƒë·∫ßu hi·ªán ƒë∆∞·ª£c ƒë·∫∑t s·∫Ω ƒë∆∞·ª£c l∆∞u c√πng v·ªõi d·ªØ li·ªáu k·ªãch b·∫£n.</li>
 </ul>

 <h3>6.9. L∆∞u v√† Ki·ªÉm tra</h3>
 <ul>
 <li><strong>L∆∞u</strong>: Nh·∫•p v√†o bi·ªÉu t∆∞·ª£ng L∆∞u (üíæ) ·ªü tr√™n c√πng b√™n ph·∫£i ƒë·ªÉ l∆∞u c·∫•u tr√∫c k·ªãch b·∫£n hi·ªán t·∫°i (bao g·ªìm c·∫£ ID Node B·∫Øt ƒë·∫ßu) v√†o backend ƒë√£ ch·ªçn (Firebase/FastAPI).</li>
 <li><strong>Ki·ªÉm tra</strong>: Nh·∫•p v√†o bi·ªÉu t∆∞·ª£ng Chatbot (ü§ñ) ƒë·ªÉ m·ªü/ƒë√≥ng b·∫£ng ƒëi·ªÅu khi·ªÉn tr√¨nh m√¥ ph·ªèng. Nh·∫•p v√†o n√∫t 'Start' trong ti√™u ƒë·ªÅ tr√¨nh m√¥ ph·ªèng ƒë·ªÉ b·∫Øt ƒë·∫ßu ki·ªÉm tra t·ª´ Node B·∫Øt ƒë·∫ßu ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh (ho·∫∑c node b·∫Øt ƒë·∫ßu ƒë∆∞·ª£c suy ra).</li>
 </ul>
</>
);
// --- üëÜ [ÏàòÏ†ï ÎÅù] ---


function HelpModal({ isOpen, onClose }) {
if (!isOpen) return null;

const [language, setLanguage] = useState('en');

return (
 <div className={styles.modalOverlay} onClick={onClose}>
 <div className={styles.modalContent} onClick={(e) => e.stopPropagation()}>
  <button className={styles.closeButton} onClick={onClose}>&times;</button>
  
  <select 
  className={styles.languageSelector} 
  value={language} 
  onChange={(e) => setLanguage(e.target.value)}
  >
  <option value="en">English</option>
  <option value="ko">ÌïúÍµ≠Ïñ¥</option>
  <option value="vi">Ti·∫øng Vi·ªát</option>
  </select>
  
  <h1>Chatbot Scenario Editor User Manual</h1>
  
  {language === 'en' && <HelpManual />}
  {language === 'ko' && <HelpManual_ko />}
  {language === 'vi' && <HelpManual_vi />}
 </div>
 </div>
);
}

export default HelpModal;